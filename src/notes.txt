TO ADD

In the expert list view, add the button to see the expert profiles availables and choose one to see the details of the expert [Partially ✔]
The expert must have a profile picture, name, description, and a button to see the expert schedule [NOT DONE]
Add mock experts profiles to be able to update the expert list view [DONE ✔]
When user logs in, the app must push the view to the expert list view [DONE ✔]
When user logs out, the app must push the view to the login view [NOT DONE]
If user select a specific expert, the app must push the view to the expert details view [NOT DONE]
If user is already logged in, the app must push the view to the expert list view [NOT DONE]
If user is not logged in, the app must push the view to the login view [NOT DONE]



TODO:
When user logs in, if she is not an expert user should be redirected to the expert list view [DONE ✔]
When user logs in, if she is an expert user should be redirected to the expert details view [NOT DONE]
When user logs in, if he doesn't have an expert pick, the app must push the view to the expert list view as normal but without programatically selecting an expert [NOT DONE]
When user logs in, if he has an expert pick, the app must push the view to the expert details view and not the expert list view [NOT DONE]
When user logs out, the app must push the view to the login view [NOT DONE]
When user is already logged in, the app must push the view to the expert list view [NOT DONE]
When user is not logged in, the app must push the view to the login view [NOT DONE]


//Changes to be added to 
//When user clicks on an expert, the app must dave the expert UID in the system store
// In the schedule view, the app must use the expert UID to get the expert schedule from Firebase

(27/05/2025)
Memo: Sistema de Gestión de Citas - Requisitos
1. Estados de Cita
Confirmada: Cuando el experto ha confirmado la cita
Por Confirmar: Estado inicial de la cita hasta que el experto la confirme

2. Accesos y Permisos
Experto (Médico):
Lectura (Read): Puede ver el estado de las citas
Escritura (Write): Puede cambiar el estado de las citas (Confirmada/Por Confirmar)
Cliente (Paciente):
Solo Lectura (Read): Puede ver el estado de sus citas
Sin permisos de escritura sobre el estado

3. Flujo de la Aplicación
Cuando un usuario selecciona una cita:
Mostrar claramente el estado actual (Confirmada/Por Confirmar)
El experto puede cambiar este estado según sea necesario

4. Estructura de Datos Propuesta
Documento del usuario deberá incluir:
Estado de la cita (confirmada/por confirmar)
Fecha y hora de la cita
Información del experto
Información del cliente

5. Consideraciones Técnicas
Implementar seguridad en Firestore para los permisos de lectura/escritura
Las reglas de seguridad deben validar que solo el experto pueda modificar el estado
La interfaz debe reflejar claramente el estado actual de la cita

6. Próximos Pasos
Implementar la lógica de cambio de estado
Actualizar las reglas de seguridad de Firestore
Modificar la interfaz para mostrar claramente el estado
Implementar la sincronización en tiempo real de los cambios de estado


//
1. Agregar Collection de Usuarios que son expertos (email), la collection será llamada "EmailsExperts" [Done ✔]
2. Cuando el usuario inicie sesion con email, el app debe buscar si el email está en la collection "EmailsExperts", si está, el usuario es un experto y se le redirige a la vista de detalles del experto, si no está, el usuario es un cliente y se le redirige a la vista de lista de expertos.[Done ✔]
//TODO Borrar todas las cuentas de Firebase para empezar con la gestion de citas desde 0
3. Si el usuario no esta logeado e intenta acceder a la vista de detalles del experto, la app lo redirigirá a la vista de login.
4. En el caso de que sea cliente la app lo redirigirá a la lista de expertos y se le pedirá que elija un experto, una vez seleccionado el experto, la app guardará el UID del experto en el store
5. Siendo el usuario cliente, cuando el cliente seleccione un experto, la app verificará si tiene citas agendadas en base a los resultados de firebase en el onMounted que obtiene los datos del experto seleccionado se debe verificar si el UID del cliente esta incluido en alguna key (takenBy) de los documentos de citas, si está, el usuario no puede agendar una cita.
6. En caso de que no haya citas agendadas, el usuario puede agendar una cita, la cita llevara el estado "Por Confirmar" y el experto podrá confirmarla o rechazarla, una solucion es que el usuario tenga una subcollection de citas donde se tenrán los datos, se creará una nueva subcollection por caada cita agendada, dentro llevará el (isDateConfirmed) donde el cliente solo tendra derechos de read y el experto tendra derechos de read y write;




